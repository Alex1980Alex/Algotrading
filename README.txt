# ПРОЕКТ ПО АЛГОТРЕЙДИНГУ КРИПТОВАЛЮТ

## ОБЗОР ПРОЕКТА

Данный проект представляет собой набор инструментов для автоматической торговли (алготрейдинга) на криптовалютных биржах Binance и Bybit. Проект включает в себя реализацию простой торговой стратегии, инструменты для мониторинга цен и примеры использования API криптовалютных бирж.

## СТРУКТУРА ПРОЕКТА

### Основные файлы:

1. **main.py** - Основной скрипт для автоматической торговли на Binance Futures
2. **addons_futures.py** - Библиотека вспомогательных функций для работы с Binance Futures
3. **telegram_allerts.py** - Скрипт для мониторинга цены и отправки уведомлений в Telegram
4. **websocket_binance.py** - Скрипт для получения данных в реальном времени через WebSocket API Binance
5. **main.ipynb** - Jupyter Notebook с примерами использования API Bybit

### Дополнительные файлы и папки:
- **css/** - Стили для веб-интерфейса
- **js/** - JavaScript для веб-интерфейса
- **images/** - Изображения, используемые в веб-интерфейсе
- **messages.html** - Экспортированная страница из Telegram с полезной информацией

## ФУНКЦИОНАЛЬНОСТЬ

### Основная торговая стратегия (main.py):
1. Находит криптовалюту с наибольшим ростом за 24 часа
2. Отслеживает рост цены (когда предпоследняя свеча выше, чем предшествующая ей)
3. Открывает LONG позицию при подтверждении роста
4. Устанавливает ордера тейк-профит и стоп-лосс для управления рисками

### Вспомогательные инструменты (addons_futures.py):
- Управление позициями (открытие, закрытие, проверка наличия)
- Работа с ордерами (создание рыночных, лимитных, стоп-ордеров, тейк-профит)
- Получение рыночных данных (цены, свечи)
- Расчет технических индикаторов (RSI, ATR, SuperTrend, HalfTrend и др.)
- Отправка уведомлений через Telegram
- Логирование операций

### Мониторинг цен (telegram_allerts.py):
- Отслеживание цены выбранной криптовалюты
- Отправка уведомлений в Telegram при достижении заданного ценового уровня

### WebSocket API (websocket_binance.py):
- Получение данных о торгах в реальном времени
- Обработка потока данных с минимальной задержкой

### Примеры использования API Bybit (main.ipynb):
- Получение информации об аккаунте
- Проверка баланса
- Получение данных о свечах
- Размещение и отмена ордеров

## НАСТРОЙКА И ЗАПУСК

### Требования:
- Python 3.9 или выше
- Библиотеки: python-binance, requests, websocket-client, pandas, numpy, pybit
- Аккаунт на Binance/Bybit с API ключами
- Бот в Telegram для отправки уведомлений

### Установка зависимостей:
```
pip install python-binance pandas numpy websocket-client requests pybit jupyter
```

### Настройка:
1. Создайте файл `settings/settings.json` со следующей структурой:
```json
{
    "API_KEY": "ваш_ключ_binance_api",
    "SECRET_KEY": "ваш_секретный_ключ_binance",
    "BOT_TOKEN": "токен_телеграм_бота",
    "ADMIN_ID": "ваш_id_в_телеграме"
}
```

2. В файлах скриптов (main.py, telegram_allerts.py) заполните переменные:
   - TELEGRAM_TOKEN - токен вашего бота Telegram
   - TELEGRAM_CHANNEL - ID канала для отправки сообщений
   - KEY, SECRET - API ключи Binance

3. В файле main.ipynb обновите API ключи для Bybit:
```python
client = HTTP(
    testnet=False,
    api_key="ваш_ключ_bybit_api",
    api_secret="ваш_секретный_ключ_bybit",
)
```

### Запуск:

1. **Основной торговый бот:**
```
python files/main.py
```

2. **Мониторинг цены:**
```
python files/telegram_allerts.py
```

3. **WebSocket слушатель:**
```
python files/websocket_binance.py
```

4. **Jupyter Notebook (для примеров Bybit):**
```
jupyter notebook files/main.ipynb
```

## ПАРАМЕТРЫ ДЛЯ НАСТРОЙКИ СТРАТЕГИИ

### Параметры в main.py:
- TF - таймфрейм для анализа (15m - 15 минут)
- TP - процент прибыли для тейк-профита (0.03 = 3%)
- SL - процент убытка для стоп-лосса (0.01 = 1%)
- DEPOSIT - размер депозита для торговли в USDT

### Параметры в telegram_allerts.py:
- SYMBOL - торговая пара для мониторинга
- LEVEL - ценовой уровень для отслеживания

## ВАЖНЫЕ ЗАМЕЧАНИЯ

1. **Тестирование:** Перед использованием на реальных средствах рекомендуется протестировать стратегию на тестовой сети (testnet) или с минимальными суммами.

2. **Риски:** Торговля криптовалютами и использование автоматических торговых систем сопряжены с существенными рисками. Используйте на свой страх и риск.

3. **API лимиты:** Биржи ограничивают количество запросов к API. При интенсивном использовании учитывайте эти ограничения.

4. **Безопасность:** Никогда не делитесь своими API ключами. Рекомендуется использовать API ключи только с разрешением на торговлю, без права на вывод средств.

5. **Логи:** Для отслеживания работы ботов создайте директорию `log/` перед запуском.

## РАСШИРЕНИЕ ФУНКЦИОНАЛЬНОСТИ

Проект можно расширить и улучшить следующими способами:

1. Добавление других торговых стратегий
2. Интеграция с другими биржами
3. Создание веб-интерфейса для мониторинга и управления ботами
4. Добавление более сложных технических индикаторов и условий входа в рынок
5. Реализация бэктестинга для проверки стратегий на исторических данных
6. Оптимизация параметров с использованием машинного обучения

## АВТОР

Проект создан в рамках курса "Основы Python для алготрейдинга". 